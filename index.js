const TelegramBot = require('node-telegram-bot-api');
const token = '6373020559:AAFl5IUOR3MOpvDLWVvvyyhRmkXvhtffZLA';
const bot = new TelegramBot(token, {polling: true});
const connection = require('./connect')

let categories_ = []
let type_categories_ = []
let categories_product_ = []
let type_product_ = []

async function categories() {
    const connect = await connection;
    const [rows, fields] = await connect.execute('SELECT `text`, `callback_data` FROM `categories`');
    rows.forEach(element => {
        categories_.push([
            {
                text: element.text,
                callback_data: element.callback_data
            }
        ])
    });
}

async function type_categories(categories_id) {
    const connect = await connection;
    const [rows, fields] = await connect.execute('SELECT `text`, `callback_data`, `categories_key` FROM `type_categories` WHERE `callback_data` = ?', [categories_id]);
    rows.forEach(element => {
        type_categories_.push([
            {
                text: element.text,
                callback_data: `0,${element.callback_data},0,${element.categories_key}`
            }
        ])
    });

    type_categories_.push([{
        text: "‚û°–ù–∞–∑–∞–¥‚¨Ö", 
        callback_data: `backs`
    }])
}

async function type_categories_product(categories_product_id, categories_key) {
    const connect = await connection;
    const [rows, fields] = await connect.execute('SELECT `text`, `callback_data`, `categories_key`, `product_key` FROM `categories_product` WHERE `callback_data` = ? and `categories_key` = ?', [categories_product_id, categories_key]);
    rows.forEach(element => {
        categories_product_.push([
            {
                text: element.text,
                callback_data: `1,0,${element.product_key},${element.categories_key},${element.callback_data}`
            }
        ])
    });
    categories_product_.push([{
        text: "‚û°–ù–∞–∑–∞–¥‚¨Ö", 
        callback_data: `1,1,1,0,0,${rows[0].callback_data}`
    }])
    console.log(rows[0].callback_data)
}

async function type_product(product_id) {
    const connect = await connection;
    const [rows, fields] = await connect.execute('SELECT `image`, `name`, `descript`, `price`, `key` FROM `product` WHERE `key` = ?', [product_id]);
    rows.forEach(element => {
        type_product_.push(element)
    });
}

(async () => {
    await categories();
    bot.on('callback_query', async query => {
        const chatID = query.from.id
        const message_id = query.message.message_id
        console.log(message_id)
        console.log(query.reply_markup)
        // await type_categories(query.data)

        var temp = new Array();
        temp = query.data.split(",");
        let temps = temp[3]
        console.log(temp[0] == 'backs')

        if(temp[0] == "0") {
            bot.deleteMessage(chatID, message_id)
            var temp = new Array();
            temp = query.data.split(",");
            let temps = temp[3]

            await type_categories_product(temp[1], temps)
            setTimeout(() => {
                bot.sendMessage(chatID, `–í—ã–±–µ—Ä–∏—Ç–µ:`, {
                    "reply_markup": {
                        "inline_keyboard": categories_product_
                    }
                });
                categories_product_.length=0;
            }, 800)
        }
        
        else if(temp[1] == "0") {
            bot.deleteMessage(chatID, message_id)
            await type_product(temp[2])
            console.log(temp[2], temps)
            bot.sendPhoto(chatID,`${type_product_[0].image}`,{
                caption : `
–ù–∞–∑–≤–∞–Ω–∏–µ: ${type_product_[0].name}
${type_product_[0].descript}

‚ùóÔ∏è–£–¢–û–ß–ù–Ø–ô–¢–ï –ù–ê–õ–ò–ß–ò–ï –¢–û–í–ê–†–ê‚ùóÔ∏è
 
–¶–µ–Ω–∞: ${type_product_[0].price}
                `,
                "reply_markup": {
                    "inline_keyboard": [
                        [{
                            text: "‚û°–ù–∞–∑–∞–¥‚¨Ö", 
                            callback_data: `0,${temp[4]},0,${temps}`
                        }]
                    ]
                }
            });
            categories_product_.length=0;
            type_product_.length=0;
        }

        else if(temp[0] == 'backs') {
            categories_.length = 0
            await categories();
            bot.sendMessage(chatID, `‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚¨áÔ∏è`, {
                "reply_markup": {
                    "inline_keyboard": categories_
                }
            });
        }
        
        else {
            if(temp[5]) {
                bot.deleteMessage(chatID, message_id)
                await type_categories(temp[5])
                bot.sendMessage(chatID, `‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä‚¨áÔ∏è`, {
                    "reply_markup": {
                        "inline_keyboard": type_categories_
                    }
                });
                console.log(temp[5])
            } else {
                bot.deleteMessage(chatID, message_id)
                await type_categories(query.data)
                bot.sendMessage(chatID, `‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è‚¨áÔ∏è`, {
                    "reply_markup": {
                        "inline_keyboard": type_categories_
                    }
                });
            }
        }
        type_categories_.length=0;
    })
})()

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ PARilka!", {
        "reply_markup": {
            resize_keyboard: true,
            "keyboard": [["üõí –ö–∞—Ç–∞–ª–æ–≥ üõí"], ["‚úÖ –ö—É–ø–∏—Ç—å ‚úÖ"]]
        }
    });
    setTimeout(() => {
        bot.sendMessage(msg.chat.id, `‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚¨áÔ∏è`, {
        "reply_markup": {
            "inline_keyboard": categories_
        }
    });
    }, 800)
});

bot.onText(/üõí –ö–∞—Ç–∞–ª–æ–≥ üõí/, (msg) => {
    bot.sendMessage(msg.chat.id, `‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚¨áÔ∏è`, {
        "reply_markup": {
            "inline_keyboard": categories_
        }
    });
});

bot.onText(/‚úÖ –ö—É–ø–∏—Ç—å ‚úÖ/, (msg) => {
    bot.sendMessage(msg.chat.id, `üì¶üîç–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É:
                                  | @vladofblad |

üï§üìç–ê–¥—Ä–µ—Å –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:

BULL SHOP —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 23:00! 
–ù–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è 199/1 –≤ –º–∞–≥–∞–∑–∏–Ω–µ Parilka, –≤—Ö–æ–¥ —Å–Ω–∞—Ä—É–∂–∏ –∑–¥–∞–Ω–∏—è.`);
});


